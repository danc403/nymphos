I am having trouble parsing the json files with the script i added at the bottom, above that is examples of three different .json files. there are over 86 of them but it is hitting some problems. can you spot anything?:
```

{
  "Python.spec": {
    "name": "Python",
    "version": "3.13.2",
    "release": "1%{?dist}",
    "summary": "A high-level scripting language",
    "License": "Python-2.0",
    "URL": "https://www.python.org/",
    "Source0": "Python-%{version}.tar.xz",
    "BuildRequires": [
      "autoconf",
      "automake",
      "gcc",
      "make",
      "zlib-devel",
      "bzip2-devel",
      "libffi-devel",
      "openssl-devel",
      "readline-devel",
      "ncurses-devel",
      "db-devel",
      "libuuid-devel",
      "libmpdec-devel",
      "pkg-config",
      "gdbm-devel"
    ],
    "Requires": [
      "zlib",
      "bzip2",
      "libffi",
      "openssl",
      "readline",
      "ncurses",
      "db",
      "libuuid",
      "gdbm"
    ],
    "BuildRequires": "libtool",
    "BuildRequires": "pkg-config",
    "Requires": "libtool-ltdl",
    "Conflicts": "python3",
    "Provides": "python3 = %{version}",
    "Obsoletes": "python3 < %{version}",
    "Prefix": "/usr",
    "BuildRoot": "%{_tmppdir}/%{name}-%{version}-%{release}-root",
    "Provides": [
      "python(abi) = 3.13"
    ],
    "Description": "Python is an interpreted, interactive, object-oriented programming language often compared to Tcl, Perl, Java, or Scheme.\n\nPython includes modules, classes, exceptions, very high level dynamic data types, and dynamic typing. Python supports interfaces to many system calls and libraries, as well as to various windowing systems (X11, Motif, Tk, Mac, MFC).",
    "Build": [
      "%configure --enable-shared --with-system-ffi --with-dbmliborder=bdb --with-ensurepip=install",
      "make"
    ],
    "Install": [
      "make install DESTDIR=%{buildroot}",
      "rm -f %{buildroot}/usr/bin/idle3",
      "rm -f %{buildroot}/usr/bin/pydoc3",
      "rm -f %{buildroot}/usr/bin/2to3",
      "rm -f %{buildroot}/usr/share/man/man1/idle3.1",
      "rm -f %{buildroot}/usr/share/man/man1/pydoc3.1",
      "rm -f %{buildroot}/usr/share/man/man1/2to3.1"
    ],
    "Files": [
      "%license LICENSE.txt",
      "%doc README.rst",
      "/usr/bin/python3.13",
      "/usr/bin/python3",
      "/usr/lib64/libpython3.13.so.1.0",
      "/usr/lib64/python3.13/*",
      "/usr/share/doc/Python-%{version}",
      "/usr/share/man/man1/python3.1.gz",
      "/usr/share/man/man1/python3.gz"
    ],
    "Changelog": [
      {
        "date": "* %{DATE}",
        "name": "Dan Carpenter",
        "email": "DanC403@gmail.com",
        "changes": "- Initial build."
      }
    ]
  },
  "Python-devel.spec": {
    "name": "Python-devel",
    "version": "3.13.2",
    "release": "1%{?dist}",
    "summary": "Header files, libraries and development tools for developing Python modules",
    "License": "Python-2.0",
    "URL": "https://www.python.org/",
    "Source0": "Python-%{version}.tar.xz",
    "Requires": "Python = %{version}",
    "BuildRequires": [
      "zlib-devel",
      "bzip2-devel",
      "libffi-devel",
      "openssl-devel",
      "readline-devel",
      "ncurses-devel",
      "db-devel",
      "libuuid-devel",
      "libmpdec-devel",
      "pkg-config"
    ],
    "BuildRequires": "libtool",
    "BuildRequires": "pkg-config",
    "Prefix": "/usr",
    "BuildRoot": "%{_tmppdir}/%{name}-%{version}-%{release}-root",
    "Description": "The Python-devel package contains the header files and libraries you need to develop Python modules that extend the Python programming language.",
    "Build": [
      "%configure --enable-shared",
      "make"
    ],
    "Install": [
      "make install DESTDIR=%{buildroot}"
    ],
    "Files": [
      "/usr/include/python3.13/*",
      "/usr/lib64/libpython3.so",
      "/usr/lib64/pkgconfig/python3.pc",
      "/usr/lib64/pkgconfig/python3-embed.pc",
      "/usr/lib64/python3.13/config-3.13-linux-x86_64-gnu/Makefile"
    ],
    "Changelog": [
      {
        "date": "* %{DATE}",
        "name": "Dan Carpenter",
        "email": "DanC403@gmail.com",
        "changes": "- Initial build."
      }
    ]
  }
}

{
  "bash.spec": {
    "content": "Name:           bash\nVersion:        5.2.15\nRelease:        1%{?dist}\nSummary:        The GNU Bourne Again Shell - The standard shell for GNU/Linux systems.\n\nLicense:        GPLv3+\nURL:            https://www.gnu.org/software/bash/\nSource0:        %{name}-%{version}.tar.gz\n\nBuildRequires:  readline-devel\nBuildRequires:  ncurses-devel\n\n# Runtime Dependencies - based on description and common usage\nRequires:       readline\nRequires:       ncurses\nRequires:       coreutils\n\n%description\nBash is the GNU Project's Bourne Again Shell, a complete implementation\nof the POSIX shell specification, with GNU extensions.  It is a fully\nfunctional scripting language, and is used extensively as the default\nlogin shell on GNU/Linux systems.\n\n%prep\n%setup -q\n\n%build\n./configure --prefix=/usr --without-bash-malloc\nmake\n\n%install\nmake install DESTDIR=%{buildroot}\n\n# Create necessary symlinks for OpenRC compatibility (if needed. Usually not necessary for bash).\n# This is just a placeholder.\n#mkdir -p %{buildroot}/etc/init.d\n#ln -s /lib/rc/init.d/single %{buildroot}/etc/init.d/bash\n\n%files\n/usr/bin/bash\n/usr/share/man/man1/bash.1*\n/usr/share/doc/%{name}/*\n/etc/profile.d/bash_completion.sh\n/etc/profile.d/bash.sh\n\n%changelog\n* %{date} Dan Carpenter DanC403@gmail.com - 5.2.15-1\n- Initial package build.\n"
  },
  "bash-devel.spec": {
    "content": "Name:           bash-devel\nVersion:        5.2.15\nRelease:        1%{?dist}\nSummary:        Development files for bash.\n\nLicense:        GPLv3+\nURL:            https://www.gnu.org/software/bash/\nSource0:        %{name}-%{version}.tar.gz\n\nRequires:       bash = %{version}-%{release}\nRequires:       readline-devel\n\n%description\nThis package contains the header files and libraries necessary for\ndeveloping applications that use bash.\n\n%prep\n%setup -q\n\n%build\n./configure --prefix=/usr --without-bash-malloc\nmake\n\n%install\nmake install DESTDIR=%{buildroot}\n\n%files\n/usr/include/bash\n/usr/include/bash/*.h\n/usr/lib64/bash/*\n\n\n%changelog\n* %{date} Dan Carpenter DanC403@gmail.com - 5.2.15-1\n- Initial package build.\n"
  }
}

{
  "dragonfly-fonts-ttf.spec": {
    "name": "dragonfly-fonts-ttf",
    "version": "0",
    "release": "1%{?dist}",
    "summary": "Dragonfly TTF Fonts",
    "license": "OFL",
    "url": "https://example.com/dragonfly-fonts-ttf",
    "source0": "dragonfly-fonts-ttf.tar.xz",
    "buildarch": "noarch",
    "requires": [
      "fontconfig"
    ],
    "buildrequires": [
      "fontconfig"
    ],
    "description": "Dragonfly TTF Fonts.",
    "prep": [
      "%setup -q"
    ],
    "build": [
      ""
    ],
    "install": [
      "mkdir -p %{buildroot}%{_datadir}/fonts",
      "cp -r * %{buildroot}%{_datadir}/fonts/",
      "mkdir -p %{buildroot}%{_datadir}/fontconfig/conf.d",
      "fc-cache -f -v"
    ],
    "files": [
      "%{_datadir}/fonts/*",
      "%license LICENSE"
    ],
    "changelog": [
      "* Wed Oct 25 2023 Dan Carpenter DanC403@gmail.com - 0-1",
      "- Initial package build"
    ]
  }
}
```

this is my json2spec.py:
```

import json
import os

def write_spec_file(spec_data, filename):
  """Writes the given spec data to a file."""

  with open(filename, 'w') as f:
    for section, values in spec_data.items():
      f.write(f"{section}:")
      if isinstance(values, list):
        for value in values:
          if isinstance(value, dict):  # For Changelog entries
            f.write("\n  -")
            for key, subvalue in value.items():
              f.write(f"\n    {key}: {subvalue}")
          else:
            f.write(f"\n  - {value}")
      else:
        f.write(f" {values}")
      f.write("\n")

def main():
  """Parses JSON files and writes .spec files."""

  for filename in os.listdir():
    if filename.endswith(".json"):
      with open(filename, 'r') as f:
        data = json.load(f)

      for spec_name, spec_data in data.items():
        if spec_name.endswith(".spec"):
          output_filename = spec_name
          write_spec_file(spec_data, output_filename)

if __name__ == "__main__":
  main()
```
